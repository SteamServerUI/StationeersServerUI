name: Build and Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build-and-release:
    # Only run if the PR was merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required for creating releases

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      # Install dependencies
      - name: Install dependencies
        run: go mod download

      # Compile the build.go script to produce Executable
      - name: Run ./build/build.go
        run: go run ./build/build.go

      # Verify the executable exists
      - name: Verify build output
        run: |
          cd build
          if ls StationeersServerControl*; then
            echo "Build succeeded: Executable found."
          else
            echo "Build failed: No executable found."
            exit 1
          fi

      # Check for git tag on any commit in the PR and select the latest
      - name: Check for git tag
        id: check_tag
        run: |
          # Get the base and head SHAs of the PR
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.sha }}
          
          # Get all commits in the PR (from base to head)
          COMMITS=$(git rev-list $BASE_SHA..$HEAD_SHA)
          
          # Initialize variables to track the latest tag
          LATEST_TAG=""
          LATEST_TIMESTAMP=0
          
          # Check each commit for tags
          for COMMIT in $COMMITS; do
            TAGS=$(git tag --points-at $COMMIT)
            for TAG in $TAGS; do
              # Get the timestamp of the commit associated with the tag
              TIMESTAMP=$(git show -s --format=%ct $COMMIT)
              if [ $TIMESTAMP -gt $LATEST_TIMESTAMP ]; then
                LATEST_TIMESTAMP=$TIMESTAMP
                LATEST_TAG=$TAG
              fi
            done
          done
          
          if [ -n "$LATEST_TAG" ]; then
            echo "Found latest tag: $LATEST_TAG"
            echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          else
            echo "No tag found for any commit in this PR."
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        if: steps.check_tag.outputs.tag != ''
        uses: docker/setup-buildx-action@v3

      # Log in to DockerHub
      - name: Log in to DockerHub
        if: steps.check_tag.outputs.tag != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        if: steps.check_tag.outputs.tag != ''
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/ssui:${{ steps.check_tag.outputs.tag }}
            ${{ secrets.DOCKERHUB_USERNAME }}/ssui:latest

      # Create release (not prerelease) if tag exists
      - name: Create Release
        if: steps.check_tag.outputs.tag != ''
        uses: softprops/action-gh-release@v2
        with:
          prerelease: false
          tag_name: ${{ steps.check_tag.outputs.tag }}
          name: "Release ${{ steps.check_tag.outputs.tag }}"
          files: ./build/StationeersServerControl*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
